#!/usr/bin/env python3
"""
JUSTERTE ML-KRITERIER ANALYSE
Finjusterer kriteriene basert p√• faktiske testresultater
"""


import pandas as pd


def analyze_test_results():
    """Analyser testresultatene og foresl√• justeringer"""

    print("üîç ANALYSE AV ML-KRITERIER TESTRESULTATER")
    print("=" * 55)

    # Les sammenligning
    comparison_file = "/Users/tor.inge.jossang@aftenbladet.no/dev/alarm-system/data/analyzed/old_vs_new_criteria_comparison_20250811_2027.csv"
    df = pd.read_csv(comparison_file)

    # Analyser hvor de nye kriteriene feiler
    weather_episodes = df[df['er_v√¶ravhengig'] == True]

    print(f"üìä ANALYSER {len(weather_episodes)} V√ÜRAVHENGIGE EPISODER:")
    print("-" * 50)

    # Finn episoder der gamle kriterier var riktige, men nye feiler
    old_correct_new_wrong = weather_episodes[
        ((weather_episodes['old_sn√∏fokk_risiko'].isin(['medium', 'high'])) |
         (weather_episodes['old_glattf√∏re_risiko'].isin(['medium', 'high']))) &
        ((weather_episodes['new_sn√∏fokk_risiko'] == 'low') &
         (weather_episodes['new_glattf√∏re_risiko'] == 'low'))
    ]

    print(f"‚ùå EPISODER DER GAMLE VAR RIKTIGE, NYE FEILER: {len(old_correct_new_wrong)}")
    for idx, episode in old_correct_new_wrong.iterrows():
        print(f"  {episode['dato']}: Gamle ga {episode['old_sn√∏fokk_risiko']}/{episode['old_glattf√∏re_risiko']}, nye ga low/low")

    # Finn episoder der nye kriterier forbedret
    new_improvements = weather_episodes[
        ((weather_episodes['old_sn√∏fokk_risiko'] == 'low') &
         (weather_episodes['old_glattf√∏re_risiko'] == 'low')) &
        ((weather_episodes['new_sn√∏fokk_risiko'].isin(['medium', 'high'])) |
         (weather_episodes['new_glattf√∏re_risiko'].isin(['medium', 'high'])))
    ]

    print(f"\n‚úÖ EPISODER DER NYE KRITERIER FORBEDRET: {len(new_improvements)}")
    for idx, episode in new_improvements.iterrows():
        old_risk = f"{episode['old_sn√∏fokk_risiko']}/{episode['old_glattf√∏re_risiko']}"
        new_risk = f"{episode['new_sn√∏fokk_risiko']}/{episode['new_glattf√∏re_risiko']}"
        print(f"  {episode['dato']}: {old_risk} ‚Üí {new_risk}")
        if episode['new_sn√∏fokk_reason'] != "Ingen kriterier oppfylt for sn√∏fokk-risiko":
            print(f"    Sn√∏fokk: {episode['new_sn√∏fokk_reason']}")
        if episode['new_glattf√∏re_reason'] != "Ingen kriterier oppfylt for glattf√∏re-risiko":
            print(f"    Glattf√∏re: {episode['new_glattf√∏re_reason']}")

    print("\nüéØ FORESL√ÖTTE JUSTERINGER:")
    print("=" * 30)

    # Analyser problemomr√•der
    print("1. SN√òFOKK-KRITERIER:")
    print("   Problem: Nye kriterier for strenge p√• vindkj√∏ling")
    print("   Anbefaling: √òk vindkj√∏ling-terskel fra -8¬∞C til -6¬∞C")
    print("   Begrunnelse: Mange v√¶ravhengige episoder har vindkj√∏ling -6 til -8¬∞C")

    print("\n2. GLATTF√òRE-KRITERIER:")
    print("   Problem: Regn-p√•-sn√∏ kriterier for strenge")
    print("   Anbefaling: Reduser nedb√∏rsmengde fra 0.5mm til 0.2mm")
    print("   Begrunnelse: Sm√• nedb√∏rsmengder kan gi glatte forhold")

    print("\n3. KOMBINERT STRATEGI:")
    print("   - Behold de gamle kriteriene som baseline")
    print("   - Legg til spesifikke forbedringer for glattf√∏re")
    print("   - Juster vindkj√∏ling-terskel moderat")

    return df

def create_balanced_criteria():
    """Lag balanserte kriterier som kombinerer det beste fra begge"""

    print("\nüîß LAGER BALANSERTE KRITERIER")
    print("=" * 35)

    criteria_code = '''
def detect_snowdrift_risk_balanced(weather_data):
    """Balanserte sn√∏fokk-kriterier"""
    
    temp = weather_data.get('temperatur', 0)
    wind_speed = weather_data.get('vindstyrke', 0)
    snow_depth = weather_data.get('sn√∏dybde', 0)
    snow_change = weather_data.get('sn√∏dybdeendring', 0)
    
    # Vindkj√∏ling (justert terskel)
    wind_chill = temp - (wind_speed * 2)
    
    # H√∏y risiko (strenge kriterier fra gamle systemet)
    if wind_chill <= -15 and wind_speed >= 7:
        return 'high', f"Ekstrem vindkj√∏ling {wind_chill:.1f}¬∞C + h√∏y vind {wind_speed:.1f}m/s"
    
    if snow_depth >= 30 and wind_speed >= 8:
        return 'high', f"Mye sn√∏ {snow_depth:.1f}cm + h√∏y vind {wind_speed:.1f}m/s"
    
    # Medium risiko (justerte terskler)
    if wind_chill <= -6 and wind_speed >= 3:  # Justert fra -8 til -6
        return 'medium', f"Vindkj√∏ling {wind_chill:.1f}¬∞C + vind {wind_speed:.1f}m/s"
    
    if snow_depth >= 15 and wind_speed >= 5:
        return 'medium', f"Moderat sn√∏ {snow_depth:.1f}cm + vind {wind_speed:.1f}m/s"
    
    if abs(snow_change) >= 3 and wind_speed >= 4:
        return 'medium', f"Sn√∏endring {snow_change:.1f}cm + vind {wind_speed:.1f}m/s"
    
    return 'low', "Ingen kriterier oppfylt for sn√∏fokk-risiko"

def detect_slippery_risk_balanced(weather_data):
    """Balanserte glattf√∏re-kriterier"""
    
    temp = weather_data.get('temperatur', 0)
    precipitation = weather_data.get('nedb√∏r', 0)
    snow_depth = weather_data.get('sn√∏dybde', 0)
    snow_change = weather_data.get('sn√∏dybdeendring', 0)
    
    # Regn p√• sn√∏ (justerte terskler)
    if (temp > -2 and precipitation >= 0.2 and snow_depth >= 1 and  # Justert fra 0.5 til 0.2
        snow_change <= 0):  # Negativ eller null endring = regn
        return 'high', f"Regn p√• sn√∏: {temp:.1f}¬∞C, {snow_depth:.1f}cm sn√∏, {precipitation:.1f}mm nedb√∏r"
    
    # Mildv√¶r etter frost
    if temp > 2 and snow_depth >= 5:
        return 'medium', f"Mildv√¶r {temp:.1f}¬∞C etter frost, {snow_depth:.1f}cm sn√∏"
    
    return 'low', "Ingen kriterier oppfylt for glattf√∏re-risiko"
'''

    # Lagre kriteriene
    with open('/Users/tor.inge.jossang@aftenbladet.no/dev/alarm-system/balanced_ml_criteria.py', 'w') as f:
        f.write(criteria_code)

    print("‚úÖ Balanserte kriterier lagret i: balanced_ml_criteria.py")

    print("\nüìã BALANSERTE KRITERIER - HOVEDENDRINGER:")
    print("-" * 45)
    print("1. Vindkj√∏ling sn√∏fokk: -8¬∞C ‚Üí -6¬∞C (mer sensitiv)")
    print("2. Regn-p√•-sn√∏ nedb√∏r: 0.5mm ‚Üí 0.2mm (mer sensitiv)")
    print("3. Beholder h√∏ye terskler for h√∏y risiko")
    print("4. Fokuserer p√• v√¶rrelaterte forbedringer")

if __name__ == "__main__":
    # Analyser testresultater
    df = analyze_test_results()

    # Lag balanserte kriterier
    create_balanced_criteria()

    print("\nüéØ ANBEFALING:")
    print("=" * 15)
    print("- Test de balanserte kriteriene p√• samme datasett")
    print("- Sammenlign med b√•de gamle og nye kriterier")
    print("- Fokuser p√• √• beholde god ytelse p√• v√¶ravhengige episoder")
    print("- Implementer kun hvis balanserte kriterier viser forbedring")
