#!/usr/bin/env python3
"""
Test av forbedret v√¶rtjeneste som utnytter alle tilgjengelige data fra Gullingen.
"""

import sys
from pathlib import Path

# Legg til src til path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from snofokk.services.enhanced_weather import EnhancedWeatherService

def main():
    """Test den forbedrede v√¶rtjenesten."""
    print("üå§Ô∏è  TESTING AV FORBEDRET V√ÜRTJENESTE")
    print("=" * 60)
    
    try:
        service = EnhancedWeatherService()
        
        # Test tilgjengelige elementer
        print("üì° TILGJENGELIGE V√ÜRELEMENTER:")
        elements = service.get_available_elements()
        print(f"  ‚Ä¢ Totalt: {len(elements)} elementer")
        
        critical_elements = [
            'air_temperature', 
            'wind_speed', 
            'precipitation_amount',
            'surface_snow_thickness',
            'wind_from_direction'
        ]
        
        available_critical = [e for e in critical_elements if e in elements]
        print(f"  ‚Ä¢ Kritiske elementer tilgjengelig: {len(available_critical)}/{len(critical_elements)}")
        
        # Test v√¶rdata henting (siste 24 timer)
        print("\nüîç TESTING V√ÜRDATA HENTING:")
        from datetime import datetime, timedelta
        
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=24)
        
        weather_data = service.get_enhanced_weather_data(
            start_time=start_time,
            end_time=end_time
        )
        
        if weather_data:
            print(f"  ‚úÖ Hentet {len(weather_data)} observasjoner")
            print(f"  üìä Kolonner: {list(weather_data.columns)}")
            
            # Test risikoanalyse
            print("\n‚ö†Ô∏è  TESTING RISIKOANALYSE:")
            risk_analysis = service.analyze_snowdrift_risk(weather_data)
            
            print(f"  üå®Ô∏è  Sn√∏fokk-risiko: {risk_analysis['snowdrift_risk']:.2f}")
            print(f"  üßä Glattf√∏re-risiko: {risk_analysis['icing_risk']:.2f}")
            print(f"  ‚ùÑÔ∏è  Nedb√∏r-risiko: {risk_analysis['precipitation_risk']:.2f}")
            
            # Test v√¶rrapport
            print("\nüìã V√ÜRRAPPORT:")
            conditions = service.get_current_conditions()
            for key, value in conditions.items():
                print(f"  ‚Ä¢ {key}: {value}")
                
        else:
            print("  ‚ö†Ô∏è  Ingen v√¶rdata hentet")
            
    except Exception as e:
        print(f"‚ùå Feil under testing: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
